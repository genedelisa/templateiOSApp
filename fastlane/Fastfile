# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.68.2"

default_platform :ios


platform :ios do

    before_all do |lane, options|
#        clear_derived_data
#        ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
#        ENV["SCAN_SLACK_CHANNEL"] = '#build'
        # cocoapods
    end



    # ---------------------------
    # Provision
    # ---------------------------
    desc "Creating a code signing certificate and provisioning profile"
        lane :provision do
            # alias for create_app_online
            version = get_version_number()
            produce(
                app_version: version
            )
            cert
            sigh(force: true)
        end


    # ---------------------------
    # Tests
    # ---------------------------
    desc "Runs all the tests"
        lane :test do
            UI.message "ðŸ•—  Running tests on scheme #{ENV['FL_SLATHER_SCHEME']}"
            test_args = {
                # no environment variable for this
                code_coverage: true,
                scheme: "templateiOSApp"
            }
            scan(test_args)

            UI.message "ðŸ•—  Running slather"
            slather(
                binary_basename:  "templateiOSApp",
                output_directory: "fastlane/test_output/"
            )
            UI.success "âœ…  Tests and slather successful"
        end

    # ---------------------------
    # Tests local
    # ---------------------------
    desc "Runs all the tests"
    lane :localtest do
        test_args = {
            # no environment variable for this
            code_coverage: true,
            scheme: "templateiOSApp"
        }
        UI.message "ðŸ•—  Running tests on scheme #{ENV['FL_SLATHER_SCHEME']}"
        scan(test_args)

        slather(
            travis: false,
            coveralls: false,
            html: true,
            show: true,
            output_directory: "fastlane/slather/"
        )
        UI.success "âœ…  Tests and slather successful"
    end


    # ---------------------------
    # Testflight
    # ---------------------------
    desc "Testflight"
        lane :runtestflight do

        # ---------------------------
        # Make sure everything is checked in
        # ---------------------------
        ensure_git_status_clean

        # ---------------------------
        # We need to be on the release branch
        # ---------------------------
        ensure_git_branch(branch: 'release')

        # ---------------------------
        # Increment version numbers.
        # ---------------------------
        increment_version_number
        version = get_version_number()
        increment_build_number(build_number: version)

        #---------------------------
        # Commit version bump
        #---------------------------
        commit_version_bump(message: 'New Version', force: true)

        #---------------------------
        # Build
        #---------------------------
        gym(clean: true, output_directory: "/tmp", scheme: "templateiOSApp", codesigning_identity: "iOS Distribution: Gene De Lisa")

        #---------------------------
        # Upload to TestFlight
        #---------------------------
        pilot(skip_submission: true, username: "genedelisa@gmail.com")

        #---------------------------
        # Tag the submit
        #---------------------------
        git_tag = version
        add_git_tag(tag: git_tag)

        #---------------------------
        # Push to GitHub
        #---------------------------
        push_to_git_remote(remote: 'origin', local_branch: 'release', remote_branch: 'release', force: false)

        #---------------------------
        # Clean up our files
        #---------------------------
        clean_build_artifacts
    end

    # ---------------------------
    # githubupload
    # ---------------------------
    desc "Upload to Github"
        lane :githubupload do

        # ---------------------------
        # Make sure everything is checked in
        # ---------------------------
        ensure_git_status_clean

        # ---------------------------
        # Increment version numbers.
        # ---------------------------
        increment_version_number
        version = get_version_number()
        increment_build_number(build_number: version)

        #---------------------------
        # Commit version bump
        #---------------------------
        commit_version_bump(message: 'New Version', force: true)

        #---------------------------
        # Build
        #---------------------------
        gym(clean: true)

        #---------------------------
        # Tag the submit
        #---------------------------
        git_tag = version
        add_git_tag(tag: git_tag)

        #---------------------------
        # Push to GitHub
        #---------------------------
        push_to_git_remote(remote: 'origin', local_branch: 'master', remote_branch: 'master', force: false)

        #---------------------------
        # Clean up
        #---------------------------
        clean_build_artifacts
    end



    # ---------------------------
    # testfilight beta
    # ---------------------------
    desc "Submit a new Beta Build to Apple TestFlight"
    desc "This will also make sure the profile is up to date"
        lane :beta do

            increment_build_number

            # match(type: "appstore") # more information: https://codesigning.guide

            # build your iOS app
            gym(scheme: ENV["SCHEME"])
            # gym(scheme: "Docs")

            # pilot will Upload a new binary to iTunes Connect for TestFlight beta testing
            # pilot
        end


    # ---------------------------
    # testcoverage
    # ---------------------------
    desc "Run slather"
        lane :testcoverage do
        slather
#        slather(
#            html: true,
#            show: true
#        )
        end


    # ---------------------------
    # Release
    # ---------------------------
    desc "Deploy a new version to the App Store"
        lane :release do
            # match(type: "appstore")
            # snapshot
            gym 
            deliver(force: true)
            # frameit
    end

    # ---------------------------
    # Screen shots with frames
    # ---------------------------
    desc "Creates new screenshots and uploads them to iTunes Connect"
        lane :screens do
            #cocoapods
            #match(app_identifier: "com.rockhoppertech.templateiOSApp", type: "development")
            snapshot
            #snapshot(scheme: 'templateiOSAppUITests',
            #                devices: ['iPhone 6s', 'iPad Air'],
            #                output_simulator_logs: true
            #            )
            frameit
            #deliver(app: 123, app_identifier: "com.rockhoppertech.templateiOSApp", skip_metadata: true, force: true)
        end


    # ---------------------------
    # Lint
    # ---------------------------
    desc "Run Swiftlint"
        lane :runlint do |options|
            swiftlint(
                mode: :lint, # SwiftLint mode: :lint (default) or :autocorrect
                ignore_exit_status: true # Allow fastlane to continue even if SwiftLint returns a non-zero exit status
            )
        end

    # ---------------------------
    # After
    # ---------------------------

    after_all do |lane|
        # This block is called, only if the executed lane was successful
        slack(
            message: "Successfully deployed new App Update."
        )
    end

    # ---------------------------
    # Error
    # ---------------------------
    error do |lane, exception|
        slack(
            message: exception.message,
            success: false
        )
    end


end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics


